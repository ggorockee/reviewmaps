name: scrape CI/CD

on:
  push:
    branches:
      - main
    paths:
      - "scrape/**" # backend/ 디렉토리 하위에 변경이 있을 때만 실행
      - ".github/workflows/ci-scrape.yml" # 워크플로우 파일 자체가 변경될 때도 실행
      # - ".github/workflows/scripts/update_values.py" # 워크플로우 파일 자체가 변경될 때도 실행
      - "server/**" # backend/ 디렉토리 하위에 변경이 있을 때만 실행

env:
  # Docker Hub에 푸시할 이미지 이름 (레포지토리/이미지명)
  DOCKER_IMAGE: ggorockee/scrape-with-selenium
  # ArgoCD가 바라보는 인프라 레포지토리
  INFRA_REPO: ggorockee/infra
  # 인프라 레포지토리 내에서 수정할 values.yaml 파일 경로
  VALUES_FILE_PATH: charts/argocd/applicationsets/valuefiles/prod/reviewmaps/values.yaml

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      scrape: ${{ steps.filter.outputs.scrape }}
      server: ${{ steps.filter.outputs.server }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 히스토리 전체 필요

      - name: Paths filter
        id: filter
        uses: dorny/paths-filter@v3
        with:
          # 현재 커밋과 푸시 직전 커밋을 비교
          ref:  ${{ github.sha }}
          base: ${{ github.event.before }}
          filters: |
            scrape:
              - 'scrape/**'
            server:
              - 'server/**'

  build-scrape:
    name: Build & Push Scrape
    runs-on: ubuntu-latest
    if: needs.changes.outputs.scrape == 'true' && contains(github.event.head_commit.message, '[skip-scrape]') == false
    needs: changes
    outputs:
      # docker/metadata-action의 결과물(버전)을 다음 Job에서 사용할 수 있도록 출력합니다.
      image_tag: ${{ steps.meta.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # docker/metadata-action을 사용하여 이미지 메타데이터(태그 등)를 동적으로 생성합니다.
      - name: Generate image tag
        id: meta
        run: |
          TAG=$(date +%Y%m%d)-$(git rev-parse --short HEAD)
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./scrape
          push: true
          tags: ggorockee/scrape-with-selenium:${{ steps.meta.outputs.tag }}
          labels: ${{ steps.meta.outputs.labels }} # metadata-action이 생성한 라벨을 사용합니다.

  build-server:
    name: Build & Push Server
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.server == 'true' && contains(github.event.head_commit.message, '[skip-scrape]') == false
    outputs:
      # docker/metadata-action의 결과물(버전)을 다음 Job에서 사용할 수 있도록 출력합니다.
      image_tag: ${{ steps.meta.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # docker/metadata-action을 사용하여 이미지 메타데이터(태그 등)를 동적으로 생성합니다.
      - name: Generate image tag
        id: meta
        run: |
          TAG=$(date +%Y%m%d)-$(git rev-parse --short HEAD)
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          push: true
          tags: ggorockee/reviewmaps-server:${{ steps.meta.outputs.tag }}
          labels: ${{ steps.meta.outputs.labels }} # metadata-action이 생성한 라벨을 사용합니다.
  
  update-manifest:
    name: Update Kubernetes Manifest
    needs: [changes, build-scrape, build-server]
    if: always() && (needs.changes.outputs.scrape == 'true' || needs.changes.outputs.server == 'true')
    runs-on: ubuntu-latest
    steps:
      # 1. Python 스크립트가 있는 현재 앱 레포지토리를 체크아웃합니다.
      - name: Checkout App Repo for script
        uses: actions/checkout@v4

      # 2. 수정할 values.yaml이 있는 Infra 레포를 'infra' 폴더에 체크아웃합니다.
      - name: Checkout Infra Repo to update values
        uses: actions/checkout@v4
        with:
          repository: ${{ env.INFRA_REPO }}
          token: ${{ secrets.INFRA_GITHUB_TOKEN }} # PAT 시크릿을 직접 사용합니다.
          ref: dev
          path: "infra"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install ruamel.yaml
        run: pip install ruamel.yaml

      # 3. 파일로 분리된 Python 스크립트를 실행하여 values.yaml을 업데이트합니다.
      - name: Update tag (scrape)
        if: needs.changes.outputs.scrape == 'true' && needs.build-scrape.result == 'success'
        run: |
          python ./.github/workflows/scripts/update_values.py \
            ./infra/${{ env.VALUES_FILE_PATH }} \
            scrape \
            ${{ needs.build-scrape.outputs.image_tag }}

      - name: Update tag (server)
        if: needs.changes.outputs.server == 'true' && needs.build-server.result == 'success'
        run: |
          python ./.github/workflows/scripts/update_values.py \
            ./infra/${{ env.VALUES_FILE_PATH }} \
            server \
            ${{ needs.build-server.outputs.image_tag }}

      
      # 4. 'infra' 디렉토리에서 Git 명령어를 실행하여 변경사항을 커밋하고 푸시합니다.
      - name: Commit and push changes
        working-directory: ./infra
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add ${{ env.VALUES_FILE_PATH }}

          if git diff --staged --quiet; then
            echo "No changes to commit in values.yaml."
            exit 0
          fi

          # 커밋 메시지를 더 명확하게 생성
          commit_message="ci: Update image tags"
          if [[ "${{ needs.changes.outputs.scrape }}" == "true" && "${{ needs.build-scrape.result }}" == "success" ]]; then
            commit_message="$commit_message (scrape: ${{ needs.build-scrape.outputs.image_tag }})"
          fi
          if [[ "${{ needs.changes.outputs.server }}" == "true" && "${{ needs.build-server.result }}" == "success" ]]; then
            commit_message="$commit_message (server: ${{ needs.build-server.outputs.image_tag }})"
          fi

          git commit -m "$commit_message"
          git push