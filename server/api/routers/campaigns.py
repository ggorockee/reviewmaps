from fastapi import APIRouter, Depends, Query, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from typing import Optional

from api.deps import get_db_session
from db import crud
from schemas.campaign import CampaignList, CampaignOut
from schemas.campaign import CampaignListV2, CampaignOutV2

from core.utils import _parse_kst, KST
from datetime import datetime


router = APIRouter(tags=["campaigns"])




@router.get("/campaigns", response_model=CampaignListV2, summary="Ï∫†ÌéòÏù∏ Î™©Î°ù Ï°∞Ìöå (V2)")
async def list_campaigns(
    db: AsyncSession            = Depends(get_db_session),

    # --- Ïã†Í∑ú/Í∏∞Ï°¥ ÌïÑÌÑ∞ ---
    region: Optional[str]       = Query(None, description="ÏßÄÏó≠ÏúºÎ°ú ÌïÑÌÑ∞ÎßÅ (Ïòà: ÏÑúÏö∏, Í≤ΩÍ∏∞)"),
    offer: Optional[str]        = Query(None, description="Ïò§Ìçº(ÌÖçÏä§Ìä∏) Î∂ÄÎ∂ÑÍ≤ÄÏÉâ, Ïòà: 10ÎßåÏõê"),
    campaign_type: Optional[str]= Query(None, description="Ï∫†ÌéòÏù∏ Ïú†Ìòï (Ïòà: Î∞©Î¨∏Ìòï, Î∞∞ÏÜ°Ìòï)"),
    campaign_channel: Optional[str] = Query(None, description="Ï∫†ÌéòÏù∏ Ï±ÑÎÑê (Ïòà: blog, instagram)"),

    category_id: Optional[int]  = Query(None, description="Ïπ¥ÌÖåÍ≥†Î¶¨ ID"),
    q: Optional[str]            = Query(None, description="ÌöåÏÇ¨/Ïò§Ìçº/ÌîåÎû´Ìèº/Ï†úÎ™© Î∂ÄÎ∂ÑÍ≤ÄÏÉâ"),
    platform: Optional[str]     = Query(None),
    company: Optional[str]      = Query(None, description="ÌöåÏÇ¨Î™Ö Î∂ÄÎ∂ÑÍ≤ÄÏÉâ"),

    # Íµ¨Ìòï ÌååÎùºÎØ∏ÌÑ∞(ÏûàÏúºÎ©¥ Ï∂îÍ∞ÄÎ°ú Ï†ÅÏö©), Í∏∞Î≥∏ ÌïÑÌÑ∞Îäî Ïò§Îäò ÎÇ†ÏßúÎ°ú Î≥ÑÎèÑ Ï†ÅÏö©Îê®
    apply_from: Optional[str]   = Query(None, description="apply_deadline >= (ISO8601, ÏÑ†ÌÉù)"),
    apply_to: Optional[str]     = Query(None, description="apply_deadline <= (ISO8601)"),
    review_from: Optional[str]  = Query(None, description="review_deadline >= (ISO8601)"),
    review_to: Optional[str]    = Query(None, description="review_deadline <= (ISO8601)"),

    #  Bounding Box
    sw_lat: Optional[float]     = Query(None, description="ÎÇ®ÏÑú ÏúÑÎèÑ"),
    sw_lng: Optional[float]     = Query(None, description="ÎÇ®ÏÑú Í≤ΩÎèÑ"),
    ne_lat: Optional[float]     = Query(None, description="Î∂ÅÎèô ÏúÑÎèÑ"),
    ne_lng: Optional[float]     = Query(None, description="Î∂ÅÎèô Í≤ΩÎèÑ"),

    # Í±∞Î¶¨ Ï†ïÎ†¨Ïö©
    lat: Optional[float]        = Query(None, description="ÏÇ¨Ïö©Ïûê ÏúÑÎèÑ (sort='distance'Ïùº Îïå ÌïÑÏàò)"),
    lng: Optional[float]        = Query(None, description="ÏÇ¨Ïö©Ïûê Í≤ΩÎèÑ (sort='distance'Ïùº Îïå ÌïÑÏàò)"),

    sort: str = Query(
        "-created_at",
        description="Ï†ïÎ†¨ ÌÇ§: created_at, apply_deadline, review_deadline, distance (ÏïûÏóê -Îäî ÎÇ¥Î¶ºÏ∞®Ïàú)"
    ),

    # üîπ Ïã†Í∑ú: ÌîåÎû´Ìèº Îã§ÏñëÌôî ÏòµÏÖò(Ïè†Î¶º Î∞©ÏßÄ)
    diversify: Optional[str] = Query(
        "platform",
        description="Îã§ÏñëÏÑ± Î≥¥Ïû• Î™®Îìú: 'platform'Ïù¥Î©¥ ÌîåÎû´ÌèºÎ≥Ñ ÏÉÅÌïú Ï†ÅÏö©"
    ),
    platform_cap: int = Query(5, ge=1, le=20, description="ÌîåÎû´ÌèºÎãπ ÏµúÎåÄ ÎÖ∏Ï∂ú Í∞úÏàò"),

    limit: int = Query(20, ge=1, le=200),
    offset: int = Query(0, ge=0),
):
    # Í±∞Î¶¨ Ï†ïÎ†¨Ïù¥Î©¥ Ï¢åÌëú ÌïÑÏàò
    if sort == "distance":
        if lat is None or lng is None:
            raise HTTPException(
                status_code=400,
                detail="sort='distance' requires 'lat' and 'lng' parameters."
            )

    # ‚úÖ Ìï≠ÏÉÅ Ï†ÅÏö©Ìï† 'Ïò§Îäò(KST) ÎÇ†Ïßú Í∏∞Ï§Ä' ÌïÑÌÑ∞ Í∞í
    today_kst_date = datetime.now(KST).date()

    total, rows = await crud.list_campaigns(
        db,
        # --- v2 ÌååÎùºÎØ∏ÌÑ∞ ---
        region=region,
        offer=offer,
        campaign_type=campaign_type,
        campaign_channel=campaign_channel,

        # --- Í∏∞Î≥∏ ÌïÑÌÑ∞ ---
        category_id=category_id,
        q=q,
        platform=platform,
        company=company,

        # ‚úÖ 'Ïò§Îäò Ïù¥ÌõÑ' Í∏∞Î≥∏ ÌïÑÌÑ∞Î•º dateÎ°ú Ï†ÑÎã¨ (ÌïµÏã¨)
        apply_from_date=today_kst_date,

        # ÏÑ†ÌÉù: Íµ¨Ìòï ÌååÎùºÎØ∏ÌÑ∞ Ï∂îÍ∞Ä Ï†ÅÏö©
        apply_from=_parse_kst(apply_from),
        apply_to=_parse_kst(apply_to),
        review_from=_parse_kst(review_from),
        review_to=_parse_kst(review_to),

        # ÏßÄÎèÑ/Í±∞Î¶¨
        sw_lat=sw_lat, sw_lng=sw_lng, ne_lat=ne_lat, ne_lng=ne_lng,
        lat=lat, lng=lng,

        # Ï†ïÎ†¨/ÌéòÏù¥Ïßï
        sort=sort, limit=limit, offset=offset,

        # üîπ ÌîåÎû´Ìèº Îã§ÏñëÌôî ÏòµÏÖò Ï†ÑÎã¨
        diversify=diversify,
        platform_cap=platform_cap,
    )
    return {"total": total, "limit": limit, "offset": offset, "items": rows}


@router.get("/campaigns/{campaign_id}", response_model=CampaignOutV2, summary="Ï∫†ÌéòÏù∏ ÏÉÅÏÑ∏ (V2)")
async def get_campaign(
    campaign_id: int,
    db: AsyncSession = Depends(get_db_session)
):
    row = await crud.get_campaign(db, campaign_id)
    if not row:
        raise HTTPException(status_code=404, detail="Not found")
    return row